package com.example.ekkya.facebook_login;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.facebook.AccessToken;
import com.facebook.AccessTokenTracker;
import com.facebook.CallbackManager;
import com.facebook.FacebookCallback;
import com.facebook.FacebookException;
import com.facebook.FacebookSdk;
import com.facebook.GraphRequest;
import com.facebook.GraphResponse;
import com.facebook.Profile;
import com.facebook.login.LoginResult;
import com.facebook.login.widget.LoginButton;
import com.google.android.gms.appindexing.Action;
import com.google.android.gms.appindexing.AppIndex;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.api.GoogleApiClient;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity implements GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener {

    private static final String STATE_RESOLVING_ERROR = "resolving_error";

    private static final int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;
    private BroadcastReceiver mRegistrationBroadcastReceiver;
    private Bitmap bitmap = null;
    private AccessTokenTracker accessTokenTracker;
    private static final String TAG = MainActivity.class.getSimpleName();
    private SharedPreferences sharedPref;
    private String name;
    private String userId;
    private ListView lvFriend;
    private TextView info;
    private LoginButton loginButton;
    private Button btnSend;
    private ImageView imageView1;
    private RoundImage roundedImage;
    private CallbackManager callbackManager;
    private ArrayAdapter adapter;
    private ArrayList friendListArray = new ArrayList();
    private GoogleApiClient mGoogleApiClient;
    private String friendToMeet;
    private boolean mResolvingError;
    private String androidId;
    // JSON flags to identify the kind of JSON response
    private static final String TAG_SELF = "self", TAG_CONVENE_REQ = "convene?", TAG_LOCATION_REQ = "location",
            TAG_MESSAGE = "message", TAG_LOCATION_RESPONSE = "locationResponse", TAG_CONVENE_RESPONSE = "conveneResponse";

    final protected static char[] hexArray = "0123456789ABCDEF".toCharArray();
    private Map<String, Object> friendMap = new HashMap<String, Object>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        FacebookSdk.sdkInitialize(getApplicationContext());
        callbackManager = CallbackManager.Factory.create();

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        accessTokenTracker = new AccessTokenTracker() {
            @Override
            protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken, AccessToken newAccessToken) {
                updateWithToken(newAccessToken);
            }
        };
        //recover the saved state
        mResolvingError = savedInstanceState != null
                && savedInstanceState.getBoolean(STATE_RESOLVING_ERROR, false);

        //initialize our instance of CallbackManager
        callbackManager = CallbackManager.Factory.create();

        info = (TextView) findViewById(R.id.info);
        loginButton = (LoginButton) findViewById(R.id.login_button);
        btnSend = (Button) findViewById(R.id.btnSend);
        lvFriend = (ListView) findViewById(R.id.lvFriend);

        //initialize imageview widget with empty profile pic
        imageView1 = (ImageView) findViewById(R.id.profileimage);

        //get user permission to access to friends list
        loginButton.setReadPermissions(Arrays.asList("user_friends"));

        //populate adapater with our array friends list
        //NOTE: simple list item 1 = Android predefined TextView resource id
        friendListArray.clear();
        adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, friendListArray);
        lvFriend = (ListView) findViewById(R.id.lvFriend);
        lvFriend.setAdapter(adapter);

        Profile profile = Profile.getCurrentProfile();
        if (profile == null) {
           // imageView1.setBackgroundResource(R.mipmap.default_profile);
            friendListArray.clear();
            adapter.notifyDataSetChanged();
            info.setText("Please Log In to continue");
        } else {
            getProfileInformation();
        }

        lvFriend.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent,
                                    View view, int position, long id) {
                int friendListID = (int) id;
                friendToMeet = (lvFriend.getItemAtPosition(friendListID).toString());
            }
        });

        loginButton.registerCallback(callbackManager, new FacebookCallback<LoginResult>() {
            @Override
            public void onSuccess(LoginResult loginResult) {
                info.setText(
                        "User ID: "
                                + loginResult.getAccessToken().getUserId()
                                + "\n" +
                                "Auth Token: "
                                + loginResult.getAccessToken().getToken()
                );
            }

            @Override
            public void onCancel() {
                info.setText("Login attempt canceled.");
            }

            @Override
            public void onError(FacebookException e) {
                info.setText("Login attempt failed.");
            }
        });

        mRegistrationBroadcastReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                sharedPref = getSharedPreferences("com.lydia.convene.storage",
                        MODE_PRIVATE);
                boolean sentToken = sharedPref
                        .getBoolean(QuickStartPreferences.SENT_TOKEN_TO_SERVER, false);
                if (sentToken) {
                    Log.d("onRecieve BroadcastTAG", "app ready to get downstream messages");
                } else {
                    Log.d("onRecieve BroadcastTAG", "ERROrrrrrrrrrrrr");
                }
            }
        };
    }

    //for broadcast receiver
    @Override
    protected void onResume() {
        super.onResume();
        // mBackgroundSound.execute((Void[]) null);
        LocalBroadcastManager.getInstance(this).registerReceiver(mRegistrationBroadcastReceiver,
                new IntentFilter(QuickStartPreferences.REGISTRATION_COMPLETE));
    }

    @Override
    protected void onPause() {
        LocalBroadcastManager.getInstance(this).unregisterReceiver(mRegistrationBroadcastReceiver);
        super.onPause();
        // mBackgroundSound.cancel(true);
    }


    @Override
    public void onConnected(Bundle bundle) {
        Log.d("HELLO", "Hiiiiiii");
    }

    @Override
    public void onConnectionSuspended(int i) {
    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putBoolean(STATE_RESOLVING_ERROR, mResolvingError);
    }

    private void updateWithToken(AccessToken currentAccessToken) {
        if (currentAccessToken != null) {
            getProfileInformation();
        } else {
            //imageView1.setBackgroundResource(R.mipmap.default_profile);
            //info.setText("Please Log In");
            friendListArray.clear();
            //adapter.notifyDataSetChanged();
        }
    }

    public void getProfileInformation() {

        GraphRequest meRequest = GraphRequest.newMeRequest(
                AccessToken.getCurrentAccessToken(),
                new GraphRequest.GraphJSONObjectCallback() {
                    @Override
                    public void onCompleted(JSONObject object, GraphResponse response) {
                        try {

                            name = response.getJSONObject().getString("name").toString();
                            userId = response.getJSONObject().getString("id").toString();
                            info.setText(name + "  " + userId);

                            JSONObject data = response.getJSONObject().getJSONObject("picture").getJSONObject("data");
                            String url = data.getString("url");
                            URL imageURL = new URL(url);

                            Log.d("IC URL", imageURL.toString());

                            new DownloadImageTask().execute(imageURL.toString());

                        } catch (JSONException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                });

        Bundle parameters = new Bundle();
        parameters.putString("fields", "id, name, picture.type(normal)");
        meRequest.setParameters(parameters);
        meRequest.executeAsync();


        //get friends list
        GraphRequest friendRequest = GraphRequest.newMyFriendsRequest(
                AccessToken.getCurrentAccessToken(),
                new GraphRequest.GraphJSONArrayCallback() {
                    @Override
                    public void onCompleted(JSONArray jarray,
                                            GraphResponse response) {
                        try {
                            JSONArray jsonArray = response.getJSONObject().getJSONArray("data");
                            friendListArray.clear();
                            for (int i = 0; i < jsonArray.length(); i++) {
                                JSONObject friendObject = jsonArray.getJSONObject(i);

                                //Log.i("FRIENDDDDdata ", friendObject.toString());
                                String friendName = friendObject.getString("name");
                                String friendID = friendObject.getString("id");
                                friendMap.put(friendName, friendID);
                                friendListArray.add(friendName);
                            }

                            //repopulate listview adpater with friends list
                            adapter.notifyDataSetChanged();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
        Bundle params = new Bundle();
        params.putString("fields", "id,name,friends");
        friendRequest.setParameters(params);
        friendRequest.executeAsync();

    }

    public class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {

        protected void onPreExecute() {
        }

        protected Bitmap doInBackground(String... urls) {

            String urldisplay = urls[0];
            bitmap = null;
            try {
                InputStream in = new java.net.URL(urldisplay).openStream();
                bitmap = BitmapFactory.decodeStream(in);
            } catch (Exception e) {
                Log.e("Error", "image download error");
                Log.e("Error", e.getMessage());
                e.printStackTrace();
            }
            return bitmap;
        }

        protected void onPostExecute(Bitmap result) {
            //set image of your imageview
            roundedImage = new RoundImage(result);
            //imageView1.setBackground(roundedImage);
        }
    }

    private boolean checkPlayServices() {
        GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
        int resultCode = apiAvailability.isGooglePlayServicesAvailable(this);
        if (resultCode != ConnectionResult.SUCCESS) {
            if (apiAvailability.isUserResolvableError(resultCode)) {
                apiAvailability.getErrorDialog(this, resultCode, PLAY_SERVICES_RESOLUTION_REQUEST)
                        .show();
            } else {
                Log.i(TAG, "This device is not supported.");
                finish();
            }
            return false;
        }
        Log.i("TAGOOGLE", "This device IS supported.");
        return true;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        callbackManager.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onStart() {
        super.onStart();
    }

    @Override
    public void onStop() {
        super.onStop();

    }
}
